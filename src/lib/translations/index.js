// src/lib/translations/index.js
import fr from './fr';
import en from './en';
import es from './es';

// DÃ©finition des langues disponibles avec leurs noms d'affichage
export const languages = {
  fr: 'ğŸ‡«ğŸ‡·',
  en: 'ğŸ‡¬ğŸ‡§',
  es: 'ğŸ‡ªğŸ‡¸'
};

// Langue par dÃ©faut
export const defaultLanguage = 'fr';

// Traductions complÃ¨tes
export const translations = {
  fr,
  en,
  es
};

/**
 * RÃ©cupÃ¨re une traduction spÃ©cifique
 * @param {string} locale - Code de langue (fr, en, es...)
 * @param {string} key - ClÃ© de traduction (peut Ãªtre imbriquÃ©e avec des points)
 * @param {Object} params - ParamÃ¨tres Ã  remplacer dans la traduction
 * @returns {string} - Traduction ou clÃ© si non trouvÃ©e
 */
export function getTranslation(locale, key, params = {}) {
  // VÃ©rifier si la langue existe
  if (!locale || !translations[locale]) {
    locale = defaultLanguage;
  }

  // Diviser la clÃ© pour naviguer dans l'objet de traductions
  const keys = key.split('.');
  let value = translations[locale];

  // Naviguer dans la structure imbriquÃ©e
  for (const k of keys) {
    if (!value || typeof value[k] === 'undefined') {
      // Si la clÃ© n'est pas trouvÃ©e dans la langue courante, essayer la langue par dÃ©faut
      if (locale !== defaultLanguage) {
        return getTranslationFromDefault(key, params);
      }

      // Si la clÃ© n'existe pas mÃªme dans la langue par dÃ©faut, retourner la clÃ©
      console.warn(`Translation key "${key}" not found`);
      return key;
    }

    value = value[k];
  }

  // Si la valeur n'est pas une chaÃ®ne, retourner la clÃ©
  if (typeof value !== 'string') {
    return key;
  }

  // Remplacer les paramÃ¨tres dans la traduction
  return replaceParams(value, params);
}

// Fonction auxiliaire pour rÃ©cupÃ©rer une traduction de la langue par dÃ©faut
function getTranslationFromDefault(key, params) {
  const keys = key.split('.');
  let value = translations[defaultLanguage];

  for (const k of keys) {
    if (!value || typeof value[k] === 'undefined') {
      console.warn(`Translation key "${key}" not found in default language`);
      return key;
    }

    value = value[k];
  }

  return typeof value === 'string' ? replaceParams(value, params) : key;
}

// Fonction pour remplacer les paramÃ¨tres dans une chaÃ®ne
function replaceParams(text, params) {
  return text.replace(/{([^}]+)}/g, (match, name) => {
    return params[name] !== undefined ? params[name] : match;
  });
}